/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <sqlx>
#include <colorchat>

#define PLUGIN	"Top Stats"
#define AUTHOR	"O'Zone"
#define VERSION	"1.0"

new Handle:gSqlTuple;
new gQuery[256];
new gData[2048];
new gLast;

enum _:Stats { KILLS, DEATHS, HEADSHOTS, POINTS }
new gStats[33][Stats];
new gTopStats[33][Stats];

enum _:Cvars { HOST, PASS, USER, DB, KILL, DEATH, HS }
new gCvars[Cvars];

enum _:Points { P_KILL, P_DEATH, P_HS }
new gPoints[Points];

new gName[64][33];
new bool:gLoaded[33];

public plugin_end() SQL_FreeHandle(gSqlTuple);

public plugin_init() 
{
	register_plugin(PLUGIN, AUTHOR, VERSION);
	
	register_event("DeathMsg", "DeathMsg", "a");
	register_message(SVC_INTERMISSION, "MsgIntermission");
	
	register_clcmd("say /statstop15", "Top15Stats");
	register_clcmd("say /stop15", "Top15Stats");
	register_clcmd("say /mytopstats", "MyTopStats");
	register_clcmd("say /mytops", "MyTopStats");
	
	gCvars[HOST] 	= register_cvar("topstats_host",	"sql.pukawka.pl", FCVAR_SPONLY|FCVAR_PROTECTED);
	gCvars[USER] 	= register_cvar("topstats_user",	"262947", FCVAR_SPONLY|FCVAR_PROTECTED);
	gCvars[PASS] 	= register_cvar("topstats_pass",	"v@+27KDFCgPHy#", FCVAR_SPONLY|FCVAR_PROTECTED);
	gCvars[DB] 		= register_cvar("topstats_db",		"262947_topstats", FCVAR_SPONLY|FCVAR_PROTECTED);
	
	gCvars[KILL]	= register_cvar("topstats_kill",	"2");
	gCvars[DEATH]	= register_cvar("topstats_death",	"2");
	gCvars[HS]		= register_cvar("topstats_hs",		"1");
	
	set_task(0.1, "SqlInit");
}

public plugin_natives ()
	register_native("top_stats_add_kill", "top_stats_add_kill", 1)

public top_stats_add_kill(id)
	gStats[id][KILLS]++;
	
public SqlInit() 
{
	gPoints[P_KILL] = get_pcvar_num(gCvars[KILL]);
	gPoints[P_DEATH] = get_pcvar_num(gCvars[DEATH]);
	gPoints[P_HS] = get_pcvar_num(gCvars[HS]);
	
	new szHost[32], szUser[32], szPass[32], szDB[32];
	
	get_pcvar_string(gCvars[HOST], szHost, charsmax(szHost));
	get_pcvar_string(gCvars[USER], szUser, charsmax(szUser));
	get_pcvar_string(gCvars[PASS], szPass, charsmax(szPass));
	get_pcvar_string(gCvars[DB], szDB, charsmax(szDB));

	gSqlTuple = SQL_MakeDbTuple(szHost, szUser, szPass, szDB);
	
	if(gSqlTuple == Empty_Handle)
		set_fail_state("Nie mozna utworzyc uchwytu do polaczenia.");
	
	new iErr, szError[32];
	new Handle:Link = SQL_Connect(gSqlTuple, iErr, szError, 31);
	if(Link == Empty_Handle)
	{
		log_amx("Error (%d): %s", iErr, szError);
		set_fail_state("Brak polaczenia z baza danych");
	}
	
	new Handle:Query;	
	Query = SQL_PrepareQuery(Link, "CREATE TABLE IF NOT EXISTS `top_stats` ( `name` varchar(64) NOT NULL, `kills` INT(11) NOT NULL, `deaths` INT(11) NOT NULL, `hs` INT(11) NOT NULL, `points` INT(11) NOT NULL, PRIMARY KEY (`name`))");
	SQL_Execute(Query);
	SQL_FreeHandle(Query);
	
	set_task(0.5, "LoadTopStats");
}

public client_putinserver(id) 
{
	if(is_user_bot(id) || is_user_hltv(id))
		return;
		
	get_user_name(id, gName[id], charsmax(gName));
	replace_all(gName[id], charsmax(gName), "'", "\'");
	replace_all(gName[id], charsmax(gName), "`", "\`");
	
	gStats[id][KILLS] = 0;
	gStats[id][DEATHS] = 0;
	gStats[id][HEADSHOTS] = 0;
	gStats[id][POINTS] = 0;
	
	gTopStats[id][KILLS] = 0;
	gTopStats[id][DEATHS] = 0;
	gTopStats[id][HEADSHOTS] = 0;
	gTopStats[id][POINTS] = 0;
	
	gLoaded[id] = false;
	
	new Data[1];
	Data[0] = id;
	formatex(gQuery, charsmax(gQuery), "SELECT * FROM `top_stats` WHERE `name` = ^"%s^"", gName[id]);
	SQL_ThreadQuery(gSqlTuple, "LoadStats", gQuery, Data, 1);
}

public client_disconnect(id) 
{
	if(is_user_bot(id) || is_user_hltv(id) || !gLoaded[id])
		return;
		
	gStats[id][POINTS] = gStats[id][KILLS]*gPoints[P_KILL] + gStats[id][HEADSHOTS]*gPoints[P_HS] - gStats[id][DEATHS]*gPoints[P_DEATH];
	formatex(gQuery, charsmax(gQuery), "UPDATE `top_stats` SET `kills` = %d, `deaths` = %d, `hs` = %d, `points` = %d  WHERE `name` = ^"%s^" AND `points` < %d", 
	gStats[id][KILLS], gStats[id][DEATHS], gStats[id][HEADSHOTS], gStats[id][POINTS], gName[id], gStats[id][POINTS]);
	SQL_ThreadQuery(gSqlTuple, "HandleStandard", gQuery);
	
	gStats[id][KILLS] = 0;
	gStats[id][DEATHS] = 0;
	gStats[id][HEADSHOTS] = 0;
	gStats[id][POINTS] = 0;
	
	gTopStats[id][KILLS] = 0;
	gTopStats[id][DEATHS] = 0;
	gTopStats[id][HEADSHOTS] = 0;
	gTopStats[id][POINTS] = 0;
	
	gLoaded[id] = false;
}

public LoadStats(FailState, Handle:Query, Error[], ErrNum, Data[], Size)
{
	if(FailState != TQUERY_SUCCESS)
	{
		log_amx("SQL Load error: %s", Error);
		return;
	}
	
	new id = Data[0];
	if(!is_user_connected(id)) 
		return;
	
	if(SQL_MoreResults(Query)) 
	{
		gTopStats[id][KILLS] = SQL_ReadResult(Query, 1);
		gTopStats[id][DEATHS] = SQL_ReadResult(Query, 2);
		gTopStats[id][HEADSHOTS] = SQL_ReadResult(Query, 3);
		gTopStats[id][POINTS] = SQL_ReadResult(Query, 4);
	} 
	else 
	{		
		formatex(gQuery, charsmax(gQuery), "INSERT INTO `top_stats` (`name`) VALUES (^"%s^")", gName[id]);
		SQL_ThreadQuery(gSqlTuple, "HandleStandard", gQuery);
	}
	gLoaded[id] = true;
}

public HandleStandard(FailState, Handle:Query, Error[], ErrnNum, Data[], Size) 
{
	if(FailState != TQUERY_SUCCESS) 
	{
		log_amx("SQL Insert/Update Error: %s", Error);
		return;
	}
}

public DeathMsg() 
{
	new Killer = read_data(1);
	new Victim = read_data(2);
	
	if(is_user_connected(Victim))
		gStats[Victim][DEATHS]++;
	
	if(Killer != Victim && get_user_team(Killer) != get_user_team(Victim))
	{
		gStats[Killer][KILLS]++;
		if(read_data(3))
			gStats[Killer][HEADSHOTS]++;
	}
}

public Top15Stats(id)
{
	if(get_systime() - gLast > 20)
		LoadTopStats();

	show_motd(id, gData, "Top 15 Najlepszych Statystyk");
}
	
public MyTopStats(id)
{
	gStats[id][POINTS] = gStats[id][KILLS]*gPoints[P_KILL] + gStats[id][HEADSHOTS]*gPoints[P_HS] - gStats[id][DEATHS]*gPoints[P_DEATH];
	if(gStats[id][POINTS] > gTopStats[id][POINTS])
		ColorChat(id, RED, "[STATY]^x01 Twoje najlepsze staty:^x04 %i^x01 zabic (w tym^x04 %i^x01 z HS) i^x04 %i^x01 zgonow^x01.", 
		gStats[id][KILLS], gStats[id][HEADSHOTS], gStats[id][DEATHS]);
	else
		ColorChat(id, RED, "[STATY]^x01 Twoje najlepsze staty:^x04 %i^x01 zabic (w tym^x04 %i^x01 z HS) i^x04 %i^x01 zgonow^x01.", 
		gTopStats[id][KILLS], gTopStats[id][HEADSHOTS], gTopStats[id][DEATHS])
}

public LoadTopStats()
{
	gLast = get_systime();
	SQL_ThreadQuery(gSqlTuple, "HandleLoadTopStats", "SELECT * FROM `top_stats` ORDER BY `points` DESC LIMIT 15");
}

public HandleLoadTopStats(FailState, Handle:Query, Error[], ErrNum, Data[], DataSize)
{
	if(FailState != TQUERY_SUCCESS)
	{
		log_amx("Error: %s", Error);
		return;
	}
	
	if(SQL_NumRows(Query))
	{
		new szName[128], iLen = 0, i = 0;
		iLen = formatex(gData, charsmax(gData), "<body bgcolor=#000000><font color=#FFB000><pre>%2s %-22.22s %6s %6s^n", "#", "Gracz", "Zabicia", "Zgony");
		
		while(SQL_MoreResults(Query))
		{
			i++;
			SQL_ReadResult(Query, 0, szName, charsmax(szName));
			replace_all(szName, charsmax(szName), "<", "[");
			replace_all(szName, charsmax(szName), ">", "]");
			if(i>=10)
				iLen += formatex(gData[iLen], 2047-iLen, "%1d %-22.22s %5d (%d HS) %7d^n", i, szName, SQL_ReadResult(Query, 1), SQL_ReadResult(Query, 3), SQL_ReadResult(Query, 2));
			else
				iLen += formatex(gData[iLen], 2047-iLen, "%1d %-22.22s %6d (%d HS) %7d^n", i, szName, SQL_ReadResult(Query, 1), SQL_ReadResult(Query, 3), SQL_ReadResult(Query, 2));
			SQL_NextRow(Query);
		}
		iLen += copy(gData[iLen], 2047-iLen, "</table></body>");
	}
}

public MsgIntermission() 
{
	new players[32], num, id;
	get_players(players, num, "h");
	
	for(new i = 0; i < num; i++) 
	{
		id = players[i];
			
		if(!is_user_connected(id) || is_user_hltv(id) || is_user_bot(id))
			continue;
			
		gStats[id][POINTS] = gStats[id][KILLS]*gPoints[P_KILL] + gStats[id][HEADSHOTS]*gPoints[P_HS] - gStats[id][DEATHS]*gPoints[P_DEATH];
		formatex(gQuery, charsmax(gQuery), "UPDATE `top_stats` SET `kills` = %d, `deaths` = %d, `hs` = %d, `points` = %d  WHERE `name` = ^"%s^" AND `points` < %d", 
		gStats[id][KILLS], gStats[id][DEATHS], gStats[id][HEADSHOTS], gStats[id][POINTS], gName[id], gStats[id][POINTS]);
		SQL_ThreadQuery(gSqlTuple, "HandleStandard", gQuery);
		gLoaded[id] = false;
		
	}
	return PLUGIN_CONTINUE;
}